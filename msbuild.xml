<Project ToolsVersion="14.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <TPath>$(MSBuildExtensionsPath32)\ExtensionPack\4.0\MSBuild.ExtensionPack.tasks</TPath>
    <ServiceName>DR Marvin</ServiceName>
    <SourceConfigPath>$(MSBuildProjectDirectory)\src\WindowsService\App.config</SourceConfigPath>
    <TransformFilePath>$(MSBuildProjectDirectory)\src\WindowsService\App.$(Environment).config</TransformFilePath>
  </PropertyGroup>
  <Import Project="$(TPath)"/>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v14.0\Web\Microsoft.Web.Publishing.targets" Condition="!Exists('$(VSToolsPath)\Web\Microsoft.Web.Publishing.targets')" />
  <!--
  <PropertyGroup>
		<SlowCheetahTargets Condition=" '$(SlowCheetahTargets)'=='' ">$(MSBuildProjectDirectory)\src\packages\SlowCheetah.2.5.15\tools\SlowCheetah.Transforms.targets</SlowCheetahTargets>
	</PropertyGroup>
	<Import Project="$(SlowCheetahTargets)" Condition="Exists('$(SlowCheetahTargets)')" />
  -->
  <ItemGroup>
    <RemoteMachines Include="$(DeployMachines.Split(`;`))"/>
  </ItemGroup>

  <Target Name="Default"  >
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="CurrentMachine=%(RemoteMachines.Identity)" Targets="Deploy"></MSBuild>
  </Target>
  <Target Name="Deploy">
    <!-- Check whether a service exists (this should return true in most cases) -->
    <MSBuild.ExtensionPack.Computer.WindowsService Condition="$(InstallService) == 'true'" TaskAction="CheckExists" ServiceName="$(ServiceName)"
                                                   RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(CurrentMachine)">
      <Output TaskParameter="Exists" PropertyName="DoesExist"/>
    </MSBuild.ExtensionPack.Computer.WindowsService>

    <!-- Stop a service on a Remote Machine -->
    <MSBuild.ExtensionPack.Computer.WindowsService Condition="$(DoesExist) == 'true' and $(InstallService) == 'true'" TaskAction="Stop" ServiceName="$(ServiceName)"
                                                   RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(CurrentMachine)"/>

    <!-- Deploy files to destination -->
    <MSBuild.ExtensionPack.FileSystem.RoboCopy Source="$(MSBuildProjectDirectory)\src\WindowsService\bin\$(Configuration)" Destination="\\$(CurrentMachine)\$(DeployPath)" Files="*.*" Options="/MIR">
      <Output TaskParameter="ExitCode" PropertyName="Exit" />
      <Output TaskParameter="ReturnCode" PropertyName="Return" />
    </MSBuild.ExtensionPack.FileSystem.RoboCopy>

    <!-- Transform config file -->
    <TransformXml
			Condition="Exists('$(TransformFilePath)')"
			Source="$(SourceConfigPath)"
			Transform="$(TransformFilePath)"
			Destination="\\$(CurrentMachine)\$(DeployPath)\DR.Marvin.WindowsService.exe.config" />

    <!-- Install a service on a Remote Machine -->
    <MSBuild.ExtensionPack.Computer.WindowsService
			Condition="!$(DoesExist) == 'true' and $(InstallService) == 'true'"
			TaskAction="Install"
			ServiceName="$(ServiceName)"
      User="$(ServiceUser)"
      Password="$(ServicePassword)"
      RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(CurrentMachine)"
			ServicePath="$(LocalDeployPath)\DR.Marvin.WindowsService.exe" />

    <MSBuild.ExtensionPack.Computer.WindowsService TaskAction="UpdateIdentity"
                                                   Condition="$(DoesExist) == 'true' and $(InstallService) == 'true'"
                                                   ServiceName="$(ServiceName)"
                                                   User="$(ServiceUser)"
                                                   Password="$(ServicePassword)"
                                                   RemoteUser="$(RemoteUser)"
                                                   RemoteUserPassword="$(RemoteUserPassword)"
                                                   MachineName="$(CurrentMachine)"
                                                   />
    
    <!-- Start a service on a Remote Machine -->
    <MSBuild.ExtensionPack.Computer.WindowsService Condition="$(InstallService) == 'true'" TaskAction="Start" ServiceName="$(ServiceName)"
                                                   RemoteUser="$(RemoteUser)" RemoteUserPassword="$(RemoteUserPassword)" MachineName="$(CurrentMachine)"/>
  </Target>
</Project>