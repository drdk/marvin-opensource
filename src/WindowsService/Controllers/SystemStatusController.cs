using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Web.Http;
using System.Web.Http.Description;
using DR.Common.Monitoring.Contract;
using DR.Common.Monitoring.Web.Models;
using DR.Marvin.WindowsService.Model;
using Swashbuckle.Swagger.Annotations;
using WebApi.OutputCache.V2;

namespace DR.Marvin.WindowsService.Controllers
{
    /// <summary>
    /// Controller to query for the general system status and health checks. 
    /// </summary>
    public class SystemStatusController : ApiController
    {
        private readonly ISystemStatus _systemStatus;
        private const string ApplicationName = "Marvin";

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="systemStatus"></param>
        public SystemStatusController(ISystemStatus systemStatus)
        {
            _systemStatus = systemStatus;
        }

        /// <summary>
        /// Ace probe end point. Doesn't check anything at the moment other when the API is running. 
        /// </summary>
        /// <returns>Status string.</returns>
        [CacheOutput(ServerTimeSpan = 30, ClientTimeSpan = 30)]
        public string GetAceProbe()
        {
            return $"Marvin is running ok on {Environment.MachineName}. Time : {DateTime.Now.ToLocalTime()}";
        }
        /// <summary>
        /// Get health check for a specific check
        /// </summary>
        /// <param name="id">id of check to perform</param>
        /// <returns>requested health check status</returns>
        [CacheOutput(ServerTimeSpan = 30, ClientTimeSpan = 30)]
        public SystemStatusModel.CheckWithException Get(string id)
        {
            if (string.IsNullOrEmpty(id))
                throw new ArgumentNullException(nameof(id));
            if (!_systemStatus.Names.Contains(id))
                throw new KeyNotFoundException("no check with id " + id);
            var status = _systemStatus.RunCheck(id);
            return new SystemStatusModel.CheckWithException(id,status);
        }

        /// <summary>
        /// Run every registred health check
        /// </summary>
        /// <returns>List of health checks</returns>
        [HttpGet]
        [CacheOutput(ServerTimeSpan = 30, ClientTimeSpan = 30)]
        public IEnumerable<SystemStatusModel.CheckWithException> GetAll()
        {
            var status = _systemStatus.RunAllChecks();
            return status.Select(c=>new SystemStatusModel.CheckWithException(c.Key,c.Value));
        }

        /// <summary>
        /// Run every registred health check 
        /// </summary>
        /// <returns>Staus of every check in Monitoring format</returns>
        [HttpGet]
        [CacheOutput(ServerTimeSpan = 30, ClientTimeSpan = 30)]
        public Monitoring GetMonitoringReport()
        {
            var status = _systemStatus.RunAllChecks().ToArray();
            return new Monitoring(status, DateTime.UtcNow, ApplicationName);
        }

        private readonly XmlMediaTypeFormatter _formatter = new XmlMediaTypeFormatter {UseXmlSerializer = true};

        /// <summary>
        /// Run every registred health check. Response in forced xml format
        /// </summary>
        /// <returns>Status in DR SCOM xml format.</returns>
        [HttpGet]
        [SwaggerResponse(HttpStatusCode.OK, type: typeof(Monitoring))]
        [CacheOutput(ServerTimeSpan = 30, ClientTimeSpan = 30)]
        public HttpResponseMessage GetXml()
        {
            return new HttpResponseMessage
            {
                Content = new ObjectContent<Monitoring>(GetMonitoringReport(), _formatter, MediaTypeHeaderValue.Parse("text/xml"))
            };
        }
        /// <summary>
        /// Git version info of the build. 
        /// ~/__version.js is also a route for this action.
        /// </summary>
        /// <returns>Version info message, same format as the one generated by cruisecontrol</returns>
        [HttpGet]
        [ApiExplorerSettings(IgnoreApi = true)]
        [CacheOutput(ServerTimeSpan = 120, ClientTimeSpan = 120)]
        public VersionInfo GetVersionInfo()
        {
            return new VersionInfo
            {
                Branch = VersionHelper.Branch,
                BuildTime = VersionHelper.BuildTime,
                GitSha = VersionHelper.ShortCommitHash,
                Remote = VersionHelper.GitRemote
            };
        }
    }
}
